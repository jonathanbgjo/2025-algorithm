//“Given a string containing just the characters '(', ')', '{', '}', '[', and ']', determine if the input string is valid.
//An input string is valid if:

//Open brackets are closed by the same type of brackets.

//Open brackets are closed in the correct order.”

class Stack {
    constructor() {
        this.items = [];
    }

    // Add an element to the top
    push(element) {
        this.items.push(element);
    }

    // Remove and return the top element
    pop() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        return this.items.pop();
    }


    // Check if stack is empty
    isEmpty() {
        return this.items.length === 0;
    }

    // Get the number of elements
    size() {
        return this.items.length;
    }
}
const openParenDict ={
    "{":"}",
    "[":"]",
    "(":")",

}
const closedParenDict={
    "}":"{",
    "]":"[",
    ")":"("
}
function validParenthesis(str){
    let stack = new Stack();
    for(let i = 0;i<str.length; i++){
        if(str[i] in openParenDict){
            stack.push(str[i]);
        }
        else if(str[i] in closedParenDict){
            if(stack.isEmpty()){
                return false;
            }
            if(stack.pop() != closedParenDict[str[i]]){
                return false;
            }
        }
    }
    if(!stack.isEmpty()){
        return false
    }
    return true;
}

console.log(validParenthesis("()"))
console.log(validParenthesis("()[]{}"))
console.log(validParenthesis("{[()]}"))
console.log(validParenthesis("((()))"))
console.log(validParenthesis("{([])}"))

console.log(validParenthesis("(]"))
console.log(validParenthesis("([)]" ))
console.log(validParenthesis("((()"))
console.log(validParenthesis("())" ))
console.log(validParenthesis("{[}"))